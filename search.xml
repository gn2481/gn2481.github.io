<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Rails 中 includes 跟 joins 的差別</title>
    <url>/2021/02/25/diffence_between_includes_and_joins/</url>
    <content><![CDATA[<h1 id="Rails-中-includes-跟-joins-的差別"><a href="#Rails-中-includes-跟-joins-的差別" class="headerlink" title="Rails 中 includes 跟 joins 的差別"></a>Rails 中 <code>includes</code> 跟 <code>joins</code> 的差別</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近幫忙在調校網站 n+1 的問題，所以想來寫個筆記，分成兩篇。</p>
<ol>
<li><a href="">Rails 中 <code>includes</code> 跟 <code>joins</code> 的差別</a></li>
<li><a href="">Rails 的 <code>length</code>、<code>count</code>、<code>size</code> 差別？</a></li>
</ol>
<h2 id="何謂-N-1-問題"><a href="#何謂-N-1-問題" class="headerlink" title="何謂 N+1 問題"></a>何謂 <code>N+1</code> 問題</h2><p>在 Rails 中建立 model 的資料關聯十分的容易，但也是因為建立方便，所以很容易就會寫出效能差的程式碼，每一次進出 Database 都會消耗很大的效能，到底何謂 <code>N+1</code> 問題呢？<br>舉個例子：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># User</span></span><br><span class="line">has_many <span class="symbol">:orders</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Order</span></span><br><span class="line">belongs_to <span class="symbol">:user</span></span><br></pre></td></tr></table></figure>
<p>當我們想在畫面上印出所有 <code>orders</code> 的 <code>user.email</code>，此時所造成的 <code>query</code> 就會長這樣：</p>
<p><img src="https://i.imgur.com/JyR4HcK.png"></p>
<p>上面的寫法就會先將所有 <code>orders</code>，找出來，在針對每一筆的 <code>order.user_id</code> 去查找<code>users</code>的表，共有 9 筆，所以找 9 次。</p>
<p>若有 n 筆就找 n 次，再加上一開始找出所有 <code>orders</code> 的 <code>query</code> ，就變成了 <code>n+1</code>。</p>
<p>若資料量稍微龐大一點，效能就會變差。</p>
<h2 id="請善用-includes"><a href="#請善用-includes" class="headerlink" title="請善用 includes"></a>請善用 <code>includes</code></h2><p>而 Rails 很貼心的有個語法可以讓我們避免這樣的問題，<code>includes</code>。<br>若將 <code>orders = Order.all</code> 改成 <code>orders = Order.all.includes(:user)</code><br><img src="https://i.imgur.com/mMlBCoB.png"></p>
<p>那在最一開始撈出所有 order 時，會順便一起把相對應的 user 找出來，此時繼續輸入：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">orders.each <span class="keyword">do</span> <span class="params">|order|</span></span><br><span class="line">  order.user.email</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>這時就不會進到 Database 中查詢。<br>從 n+1 變成 1+1 👍</p>
<h3 id="includes-也支援巢狀關聯-使用-hash"><a href="#includes-也支援巢狀關聯-使用-hash" class="headerlink" title="includes 也支援巢狀關聯 (使用 hash)"></a><code>includes</code> 也支援巢狀關聯 (使用 hash)</h3><p>如果除了 <code>user</code> ，還想一起找出跟 <code>user</code> 有關聯的 model 可以使用 hash 的寫法</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以 profile 為例</span></span><br><span class="line"><span class="comment"># User has_many profiles</span></span><br><span class="line"></span><br><span class="line">orders = Order.all.includes(<span class="symbol">user:</span> [ <span class="symbol">:profile</span> ])</span><br><span class="line"><span class="comment"># 可以順便把 profile 撈出來</span></span><br></pre></td></tr></table></figure>


<h2 id="還有一個語法叫-joins"><a href="#還有一個語法叫-joins" class="headerlink" title="還有一個語法叫 joins"></a>還有一個語法叫 <code>joins</code></h2><p>除了 <code>includes</code> 之外，還有一個很像的語法叫做 <code>joins</code>，不過差別為 <code>joins</code> 是過濾 <code>model</code> 之間的關聯，像上方的寫法，在印出 <code>user.email</code> 的時候還是會產生查詢！</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">orders = Order.all.joins(<span class="symbol">:user</span>)</span><br><span class="line"><span class="comment"># 回傳具有 user_id 的 order</span></span><br></pre></td></tr></table></figure>
<h4 id="而-has-many-又會跟-belongs-to-的情境有不一樣的回傳結果"><a href="#而-has-many-又會跟-belongs-to-的情境有不一樣的回傳結果" class="headerlink" title="而 has_many 又會跟 belongs_to 的情境有不一樣的回傳結果"></a>而 <code>has_many</code> 又會跟 <code>belongs_to</code> 的情境有不一樣的回傳結果</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># User has_many :orders</span></span><br><span class="line">user = User.joins(<span class="symbol">:orders</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>查詢所有具有 <code>user_id</code> 的 <code>order</code>，並回傳該 <code>order</code> 的 <code>user</code> ，若有很多 <code>order</code> 所屬同一個 <code>user</code>，則回傳值會包含大量同一名 <code>user</code> 的資料，可以用 <code>uniq</code> 處理。</li>
</ul>
<h2 id="來個總結！"><a href="#來個總結！" class="headerlink" title="來個總結！"></a>來個總結！</h2><p>簡單來說，若是要處理大量資料，會比較建議使用 <code>includes</code>，以避免 n+1 的問題，而 <code>joins</code> 的話，目前推論是需要對資料做關聯 model 的條件篩選，才會比較建議使用。</p>
<hr>
<h4 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h4><p><a href="https://adlerhsieh.com/blog/20141028-rails-include-join-avoid-n-1-query">Rails使用 include 和 join 避免 N+1 query</a></p>
<p><a href="https://ihower.tw/rails/performance.html">Ruby on Rails 實戰聖經 - 網站效能</a></p>
<p><a href="https://apidock.com/rails/ActiveRecord/QueryMethods/includes">官方 API 文件</a></p>
<p><a href="https://stackoverflow.com/questions/1208636/rails-include-vs-joins">stackoverflow</a></p>
]]></content>
      <categories>
        <category>Ruby on Rails</category>
      </categories>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>n+1</tag>
      </tags>
  </entry>
  <entry>
    <title>Feature Toggles</title>
    <url>/2021/08/09/feature_toggles/</url>
    <content><![CDATA[<h1 id="什麼是-feature-toggle？"><a href="#什麼是-feature-toggle？" class="headerlink" title="什麼是 feature toggle？"></a>什麼是 feature toggle？</h1><p>若一個功能要成功上線需有：<br><img src="https://i.imgur.com/ikSwJjG.png"></p>
<hr>
<p>一般開發方式大致分成下面幾種：</p>
<p><strong>One branch</strong> <em>(最簡單的方式一定是通通在 master!)</em></p>
<blockquote>
<p>請在自己 side_project 上這樣做</p>
</blockquote>
<p>只在 master 上開發，程式必須等到功能開發完全才能 release，中途 release 會影響到現有、或別人做的功能。<br><img src="https://i.imgur.com/kCbpXQq.png"></p>
<p>開發複雜度小很多，但真的沒有公司這樣用。</p>
<hr>
<p><strong>Feature Branch</strong></p>
<blockquote>
<p>為了協作開發，開發 A 功能的時候也能同時開發 B 功能，也不會影響到其他 release 的東西。</p>
</blockquote>
<p><img src="https://i.imgur.com/JJNaYvP.png"><br>開另一支分支，全部完成再 release，中途 release master 也不會影響到現有功能，但隨著功能的開發時間拉長，merge 回 master 的時候衝突可能很多，code_review 也會很大包，也有可能有重工的狀況。</p>
<hr>
<p><strong>trunk_base_flow</strong></p>
<blockquote>
<p>降低每個 commit 粒度，branch 的週期，merge 的時候更 easy</p>
</blockquote>
<p><img src="https://i.imgur.com/AKeir5a.png"></p>
<p>merge 回 master 時不會一次要解很多衝突，code_review 方便，持續整合，加快迭代。</p>
<div class="note info"><p>Q：但這樣不就把未完成的功能一起 release 出去了嗎？<br><strong>A：所以我們搭配 Feature Toggles/Flags ，來隱藏尚未完成的功能！</strong></p>
</div>


<h1 id="rails-的-Feature-Toggles"><a href="#rails-的-Feature-Toggles" class="headerlink" title="rails 的 Feature Toggles"></a>rails 的 Feature Toggles</h1><h2 id="Unleash"><a href="#Unleash" class="headerlink" title="Unleash"></a><a href="https://github.com/Unleash/unleash">Unleash</a></h2><blockquote>
<p>👆<em>官方文件，請點標題</em></p>
</blockquote>
<p>文件詳細，但複雜度也很高，要另架一個 server，自己串接 API</p>
<p><img src="https://i.imgur.com/jQRpQFh.png"></p>
<h2 id="Flipper-and-Rollout"><a href="#Flipper-and-Rollout" class="headerlink" title="Flipper and  Rollout"></a><a href="https://github.com/jnunemaker/flipper">Flipper</a> and  <a href="https://github.com/fetlife/rollout">Rollout</a></h2><blockquote>
<p>👆<em>官方文件，請點標題</em></p>
</blockquote>
<p>rollout 是仰賴 redis 去做開關的控制，而 Flipper 是可以指定你要用什麼方式去存取開關的資料。<br>基本做法都差不多，也都有另外的 ui 可以用，甚至可以指定誰可以執行、百分比釋出</p>
<blockquote>
<p>ps. Flipper 支援 rollout，也就是你可以用 Flipper 把 Rollout 包起來</p>
</blockquote>
<div class="note info"><p>開關有分兩種，一種就是很簡單的開跟關，另一種是可以依照百分比釋出的。</p>
</div>

<h1 id="實作-以-active-record-為例"><a href="#實作-以-active-record-為例" class="headerlink" title="實作(以 active_record 為例)"></a>實作(以 <code>active_record</code> 為例)</h1><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># In Your Gemfile.rb</span></span><br><span class="line">gem <span class="string">&#x27;flipper&#x27;</span></span><br><span class="line">gem <span class="string">&#x27;flipper-active_record&#x27;</span></span><br></pre></td></tr></table></figure>
<p>請記得 <code>bundle</code>，接著使用<code>rails g flipper:active_record</code></p>
<p>這會幫你 create 兩個 table</p>
<ol>
<li><code>flipper_features</code></li>
<li><code>flipper_gates</code><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateFlipperTables</span> &lt; ActiveRecord::Migration[6.1]</span></span><br><span class="line">  def <span class="keyword">self</span>.up</span><br><span class="line">    create_table <span class="symbol">:flipper_features</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.string <span class="symbol">:key</span>, <span class="symbol">null:</span> <span class="literal">false</span> <span class="comment">#  feature 的名稱</span></span><br><span class="line">      t.timestamps <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    add_index <span class="symbol">:flipper_features</span>, <span class="symbol">:key</span>, <span class="symbol">unique:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    create_table <span class="symbol">:flipper_gates</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.string <span class="symbol">:feature_key</span>, <span class="symbol">null:</span> <span class="literal">false</span> <span class="comment"># feature 的名稱</span></span><br><span class="line">      t.string <span class="symbol">:key</span>, <span class="symbol">null:</span> <span class="literal">false</span> <span class="comment"># 控制開關的 type</span></span><br><span class="line">      t.string <span class="symbol">:value</span>	      <span class="comment"># 隨著 type 不一樣有不一樣的值</span></span><br><span class="line">      t.timestamps <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    add_index <span class="symbol">:flipper_gates</span>, [<span class="symbol">:feature_key</span>, <span class="symbol">:key</span>, <span class="symbol">:value</span>], <span class="symbol">unique:</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  def <span class="keyword">self</span>.down</span><br><span class="line">    drop_table <span class="symbol">:flipper_gates</span></span><br><span class="line">    drop_table <span class="symbol">:flipper_features</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
記得 migration!<div class="note info"><p><code>flipper_features</code> 只記有哪些開關，<code>flipper_gates</code> 記你要怎麼控制這個開關</p>
</div>

</li>
</ol>
<p>到這邊其實已經可以直接在 console 使用 feature_toggle 的功能了。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rails console</span></span><br><span class="line">Flipper.enable(<span class="symbol">:search</span>) <span class="comment"># 會幫你直接加入資料</span></span><br><span class="line"><span class="comment"># 可以使用下方來查看你的開關。</span></span><br><span class="line">pp Flipper::Adapters::ActiveRecord::Feature.all</span><br><span class="line"><span class="comment"># [#&lt;Flipper::Adapters::ActiveRecord::Feature:0x00007f97e8f05cd0</span></span><br><span class="line"><span class="comment">#   id: 1,</span></span><br><span class="line"><span class="comment">#   key: &quot;search&quot;,</span></span><br><span class="line"><span class="comment">#   created_at: Sat, 31 Jul 2021 06:20:03.158525000 UTC +00:00,</span></span><br><span class="line"><span class="comment">#   updated_at: Sat, 31 Jul 2021 06:20:03.158525000 UTC +00:00&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下方可以看到你控制開關的方式(要 enable才會 create 資料，disable 就刪掉資料)</span></span><br><span class="line">pp Flipper::Adapters::ActiveRecord::Gate.all</span><br><span class="line"><span class="comment"># [#&lt;Flipper::Adapters::ActiveRecord::Gate:0x00007f97e8e6e920</span></span><br><span class="line"><span class="comment">#   id: 1,</span></span><br><span class="line"><span class="comment">#   feature_key: [FILTERED],</span></span><br><span class="line"><span class="comment">#   key: &quot;boolean&quot;,</span></span><br><span class="line"><span class="comment">#   value: &quot;true&quot;,</span></span><br><span class="line"><span class="comment">#   created_at: Sat, 31 Jul 2021 06:26:55.841467000 UTC +00:00,</span></span><br><span class="line"><span class="comment">#   updated_at: Sat, 31 Jul 2021 06:26:55.841467000 UTC +00:00&gt;]</span></span><br></pre></td></tr></table></figure>
<p>不過要在 controller 中調用 Flipper 的方法，必須先 initialize，或者直接建立一份檔案，放在 <code>lib/</code> 中</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># config/initializers/flipper/feature.rb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># initializer</span></span><br><span class="line">Flipper.configure <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  config.adapter &#123; Flipper::Adapters::ActiveRecord.new &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化的時候就設定 group</span></span><br><span class="line">Flipper.register(<span class="symbol">:admins</span>) &#123; <span class="params">|thing|</span> thing.admin? &#125;</span><br></pre></td></tr></table></figure>

<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># In Your Gemfile.rb</span></span><br><span class="line">gem <span class="string">&#x27;flipper-ui&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>記得 <code>bundle</code>，接著設定你的 router!</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># config/routes.rb</span></span><br><span class="line">YourRailsApp::Application.routes.draw <span class="keyword">do</span></span><br><span class="line">  mount Flipper::UI.app(Flipper) =&gt; <span class="string">&#x27;/flipper&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>若要依賴 devise 設定權限，example:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># initializers/admin_access.rb</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CanAccessFlipperUI</span></span></span><br><span class="line">  def <span class="keyword">self</span>.matches?(request)</span><br><span class="line">    current_user = request.env[<span class="string">&#x27;warden&#x27;</span>].user</span><br><span class="line">    current_user.present? &amp;&amp; current_user.respond_to?(<span class="symbol">:admin?</span>) &amp;&amp; current_user.admin?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config/routes.rb</span></span><br><span class="line"></span><br><span class="line">constraints CanAccessFlipperUI <span class="keyword">do</span></span><br><span class="line">  mount Flipper::UI.app(Flipper) =&gt; <span class="string">&#x27;/flipper&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>或是直接使用 devise_group 做輔助</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">devise_scope <span class="symbol">:admin</span> <span class="keyword">do</span></span><br><span class="line">  authenticated <span class="symbol">:admin</span> <span class="keyword">do</span></span><br><span class="line">    mount Flipper::UI.app(Flipper) =&gt; <span class="string">&#x27;/flipper&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>UI 的部分可以只能稍微客製化，彈性不大</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># config/initializers/flipper_ui_config.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;flipper/ui&#x27;</span></span><br><span class="line"></span><br><span class="line">Flipper::UI.configure <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  config.banner_text = <span class="string">&#x27;Production Environment&#x27;</span></span><br><span class="line">  config.banner_class = <span class="string">&#x27;danger&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<div class="note info"><p>由於沒有生出任何的檔案讓你做修改，所以要客製化，只能在 <code>config/initializers/</code> 裡新增檔案，在檔案裡 <code>require flipper/**</code> 的相關檔案才能進行設定。<strong>也就是改一次就要關一次 server 喔</strong></p>
</div>


</li>
</ul>
<h2 id="Flipper-控制開關的方法-Gates"><a href="#Flipper-控制開關的方法-Gates" class="headerlink" title="Flipper 控制開關的方法 Gates"></a>Flipper 控制開關的方法 Gates</h2><blockquote>
<p>flipper_gates 的 key</p>
</blockquote>
<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><ul>
<li>只有開跟關的選項<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Flipper.enable(<span class="symbol">:search</span>)</span><br><span class="line">Flipper.enabled?(<span class="symbol">:search</span>) <span class="comment"># true</span></span><br></pre></td></tr></table></figure>
<h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3></li>
<li>先製作好 group<ul>
<li>使用 <code>Flipper.register(:admins) &#123; |thing| thing.admin? &#125;</code>，<strong>所以你的 thing 要有 admin? 這個方法可以用</strong></li>
<li>就可以直接使用 <code>Flipper.enabled?(:feature_name, current_user)</code> 去做判斷。<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Flipper.register(<span class="symbol">:admins</span>) &#123; <span class="params">|thing|</span> thing.admin? &#125;</span><br><span class="line"></span><br><span class="line">Flipper.enabled?(<span class="symbol">:feature_name</span>, admin_user) <span class="comment"># true</span></span><br><span class="line">Flipper.enabled?(<span class="symbol">:feature_name</span>, non_admin_user) <span class="comment">#false</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="actor"><a href="#actor" class="headerlink" title="actor"></a>actor</h3><ul>
<li>直接使用 <code>flipper_id</code> 指定誰(ex. <code>user</code>、<code>company</code>)可以過開關，<strong>請記得一定要有 flipper_id 這個方法可以用，因為 gates 是認這個！</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># model/user.rb</span></span><br><span class="line">alias_method <span class="symbol">:flipper_id</span>, <span class="symbol">:id</span></span><br></pre></td></tr></table></figure>
<div class="note info"><p>實作起來的實際狀況：<br>就算沒有設定<code>flipper_id</code> 這個方法，預設好像也是抓 <code>id</code>，但 value 那一格存的會是 <code>User;1</code>，有設定的話就會是你設定的 value</p>
</div>

</li>
</ul>
<h3 id="百分比模式"><a href="#百分比模式" class="headerlink" title="百分比模式"></a>百分比模式</h3><h4 id="percentage-of-actors"><a href="#percentage-of-actors" class="headerlink" title="percentage_of_actors"></a><code>percentage_of_actors</code></h4><ul>
<li>設定為整個系統中，多少百分比 的 actors 打開</li>
<li>不過要這樣用的話一定要加 <code>alias_method :flipper_id, :id</code>，在你要控制的 model 裡</li>
<li>每個功能應該要只有一種 actor<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Flipper.enable <span class="symbol">:feature_name</span>, Flipper.actors(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">Flipper.enable_percentage_of_actors <span class="symbol">:feature_name</span>, <span class="number">10</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="percentage-of-time"><a href="#percentage-of-time" class="headerlink" title="percentage_of_time"></a><code>percentage_of_time</code></h4><ul>
<li>用機率的方式決定是否開啟功能。<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不論是否有給第二個參數，皆有 25% 機率為 true</span></span><br><span class="line">Flipper.enable_percentage_of_time(<span class="symbol">:new_feature</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">Flipper.enabled?(<span class="symbol">:new_feature</span>) <span class="comment"># 25% 機率為 true </span></span><br><span class="line">Flipper.enabled?(<span class="symbol">:new_feature</span>, user)<span class="comment"># 25% 機率為 true</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>feature_toggle 雖然好用，但請記得：</p>
<ol>
<li>toggle 太多，會不好維護 =&gt; 你可能要維護兩版。</li>
<li>toggle 的功能粒度太大，但能控制的細節是有限的，請維持適中的粒度大小</li>
<li>每個 toggle 的功能，盡量不要耦合到其他 toggle 的功能，請別搞死自己XD”</li>
<li>還是會有搞爆 production 的風險啊！</li>
</ol>
<h2 id="規範可參考-gitLab-的-使用原則"><a href="#規範可參考-gitLab-的-使用原則" class="headerlink" title="規範可參考 gitLab 的 使用原則"></a>規範可參考 <a href="https://docs.gitlab.com/ee/development/feature_flags/">gitLab 的 使用原則</a></h2><p><img src="https://i.imgur.com/BGH0MiZ.png"></p>
<h1 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h1><ol>
<li><a href="https://itw01.com/5JWE4D6.html">Feature Flag 功能釋出控制</a></li>
<li><a href="https://mileschou.github.io/blog/feature-toggle-faq/">Feature Toggle 應用常見問題</a></li>
<li><a href="https://www.flippercloud.io/docs#features">Flipper Cloud</a></li>
</ol>
]]></content>
      <categories>
        <category>Ruby on Rails</category>
      </categories>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>feature_toggle</tag>
      </tags>
  </entry>
  <entry>
    <title>Single-table inheritance And Polymorphic</title>
    <url>/2021/12/08/single_table_inheritance_and_polymorphic/</url>
    <content><![CDATA[<h1 id="STI-與-多型關聯-的-combo-技"><a href="#STI-與-多型關聯-的-combo-技" class="headerlink" title="STI 與 多型關聯 的 combo 技"></a>STI 與 多型關聯 的 combo 技</h1><h3 id="先來假設一個情境"><a href="#先來假設一個情境" class="headerlink" title="先來假設一個情境"></a>先來假設一個情境</h3><p>使用者可以訂閱不同的方案，年繳或月繳之類的</p>
<h2 id="1-單一表格繼承-STI-Single-table-inheritance"><a href="#1-單一表格繼承-STI-Single-table-inheritance" class="headerlink" title="1. 單一表格繼承 STI (Single-table inheritance)"></a>1. <strong>單一表格繼承 STI</strong> (Single-table inheritance)</h2><ol>
<li><code>YearPlan</code> 和 <code>MonthPlan</code> <code>共用，Plan</code> 這個 <code>table</code></li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Table name: plans</span></span><br><span class="line"><span class="comment">#  id                :bigint           not null, primary key</span></span><br><span class="line"><span class="comment">#  type              :string(191)      not null</span></span><br><span class="line"><span class="comment">#  status            :integer          default(&quot;pending&quot;)</span></span><br><span class="line"><span class="comment">#  amount            :integer</span></span><br><span class="line"><span class="comment">#  created_at        :datetime         not null</span></span><br><span class="line"><span class="comment">#  updated_at        :datetime         not null</span></span><br></pre></td></tr></table></figure>

<p>STI 單一表格繼承，會根據你使用建立的 <code>model</code> 在 <code>plans</code> 的這個 <code>table</code> 的 <code>type</code> 中紀錄 <code>model_name</code></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># model/plan.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plan</span> &lt; ApplicationRecord</span></span><br><span class="line">  <span class="comment"># do_something</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># model/foo_plan.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YearPlan</span> &lt; Plan</span></span><br><span class="line">  <span class="comment"># do_something</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># model/boo_plan.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MonthPlan</span> &lt; Plan</span></span><br><span class="line">  <span class="comment"># do_something</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>ex. </p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rails console</span></span><br><span class="line">YearPlan.create!(<span class="symbol">amount:</span> <span class="number">999</span>, <span class="symbol">status:</span> <span class="string">&quot;active&quot;</span>)</span><br><span class="line"></span><br><span class="line">MonthPlan.create!(<span class="symbol">amount:</span> <span class="number">99</span>, <span class="symbol">status:</span> <span class="string">&quot;active&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>這樣的情況，會在 <code>plans</code> 的 <code>table</code> 中 建立一筆 <code>type</code> 分別為 <code>&quot;YearPlan&quot;</code>、<code>&quot;MonthPlan&quot;</code> 的 record<br><img src="https://i.imgur.com/715jUoM.png"></p>
<p>而在 console <code>YearPlan.last</code>，只是去 <code>Plans</code> 這個 <code>table</code> 找<br><img src="https://i.imgur.com/GdAzqgL.png"></p>
<div class="note info"><p>因為這個功能，在 rails 裡，column 的名字不能亂取成 type</p>
</div>
<h2 id="2-多型關聯-polymorphic"><a href="#2-多型關聯-polymorphic" class="headerlink" title="2. 多型關聯 polymorphic"></a>2. 多型關聯 polymorphic</h2><p>先假設另外一個單純的情境來講 polymorphic，以 <a href="https://ihower.tw/rails/activerecord-relationships.html">Rails實戰聖經</a>裡面的例子，airtcle、photo 都可以被 comment<br>所以 comment 可以用多型的關係指向不同的 model 關聯。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:commentable</span>, <span class="symbol">polymorphic:</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span> &lt; ApplicationRecord</span></span><br><span class="line">  has_many <span class="symbol">:comments</span>, <span class="symbol">as:</span> <span class="symbol">:commentable</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> &lt; ApplicationRecord</span></span><br><span class="line">  has_many <span class="symbol">:comments</span>, <span class="symbol">as:</span> <span class="symbol">:commentable</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">article = Article.first</span><br><span class="line"></span><br><span class="line"><span class="comment"># 透過關連新增留言</span></span><br><span class="line">comment = article.comments.create(<span class="symbol">:content</span> =&gt; <span class="string">&quot;First Comment&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以發現 Rails 很聰明的幫我們指定了被留言物件的種類和id</span></span><br><span class="line">comment.commentable_type =&gt; <span class="string">&quot;Article&quot;</span></span><br><span class="line">comment.commentable_id =&gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以透過 commentable 反向回查關連的物件</span></span><br><span class="line">comment.commentable =&gt; #&lt;Article id: 1, ....&gt;</span><br></pre></td></tr></table></figure>
<div class="note warning"><p>到這裡我一直都認為，在寫入的 <code>commentable_type</code> ，是去抓取物件的 model(class) name，直到他與 STI 相遇了……</p>
</div>

<h2 id="回到-STI-與-polymorphic"><a href="#回到-STI-與-polymorphic" class="headerlink" title="回到 STI 與 polymorphic"></a>回到 STI 與 polymorphic</h2><p>使用者可以分別訂閱不同的方案，但其實可以開成一個 model 就好。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subscription</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:planable</span>, <span class="symbol">polymorphic:</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Table name: subscriptions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  id                       :bigint           not null, primary key</span></span><br><span class="line"><span class="comment">#  planable_type            :string(191)</span></span><br><span class="line"><span class="comment">#  planable_id              :integer</span></span><br><span class="line"><span class="comment">#  status                   :integer          default(&quot;active&quot;)</span></span><br><span class="line"><span class="comment">#  created_at               :datetime         not null</span></span><br><span class="line"><span class="comment">#  updated_at               :datetime         not null</span></span><br></pre></td></tr></table></figure>

<p>這樣的情況預期可以讓 <code>Subscription</code> 根據 <code>planable</code> 帶進來的 <code>record</code> 去找到相關連的 <code>object</code></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">my_plan = YearPlan.last</span><br><span class="line"></span><br><span class="line">record = Subscription.create!(<span class="symbol">planable:</span> my_plan, <span class="symbol">status:</span> <span class="string">&quot;active&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/55rWh04.png"></p>
<p>接著讓我們來看看 這個 record</p>
<p><img src="https://i.imgur.com/ZVlpdzx.png"></p>
<p><code>planable_type</code> 寫的是 寫的是 <code>Plan</code> ，不是 <code>YearPlan</code> ，所以看起來是去抓他的 <code>table_name</code>，要注意！</p>
<h2 id="💡-解法"><a href="#💡-解法" class="headerlink" title="💡 解法"></a>💡 解法</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">before_validation <span class="symbol">:set_type</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_type</span></span></span><br><span class="line">  <span class="keyword">self</span>.planable_type = planable.<span class="keyword">class</span>.name</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>若有任何指教，歡迎留言給我。🙏</p>
<h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ol>
<li><a href="https://stackoverflow.com/questions/9628610/why-polymorphic-association-doesnt-work-for-sti-if-type-column-of-the-polymorph">stack over flow</a></li>
<li><a href="https://ihower.tw/rails/activerecord-relationships.html">Rails實戰聖經</a></li>
</ol>
]]></content>
      <categories>
        <category>Ruby on Rails</category>
      </categories>
      <tags>
        <tag>Ruby on Rails</tag>
      </tags>
  </entry>
</search>
